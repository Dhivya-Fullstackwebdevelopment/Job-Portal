ckeditor3


 Ckeditorpage1
import React, { useState } from 'react';
import { CKEditor } from '@ckeditor/ckeditor5-react';
import ClassicEditor from '@ckeditor/ckeditor5-build-classic';

const CKEditorComponent = () => {
  const [editorData, setEditorData] = useState('<p>Type your content here...</p>');

  const handleEditorChange = (_event, editor) => {
    const data = editor.getData();
    setEditorData(data);
    console.log('Editor Data:', data);
  };

  return (
    <div className="editor-container">
      <h2>CKEditor 5 with React</h2>
      <CKEditor
        editor={ClassicEditor}
        data={editorData}
        onChange={handleEditorChange}
        config={{
          ckfinder: {
            uploadUrl: 'http://localhost:3000/upload' // Ensure this matches your server endpoint
          },
          toolbar: [
            'heading', '|',
            'bold', 'italic', 'link', 'bulletedList', 'numberedList', 'blockQuote', '|',
            'undo', 'redo', '|',
            'imageUpload' // Ensure this is in your toolbar configuration
          ],
          language: 'en'
        }}
      />
      <div className="editor-content">
        <h3>Content</h3>
        {/* Render the editor content using dangerouslySetInnerHTML */}
        <div dangerouslySetInnerHTML={{ __html: editorData }} />
      </div>
    </div>
  );
};

export default CKEditorComponent;






app.js

const express = require('express');
const cors = require('cors');
const multer = require('multer');
const path = require('path');
const fs = require('fs');

const app = express();
const uploadDir = path.join(__dirname, 'uploads');

// Ensure the uploads directory exists
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir);
}

// Middleware
app.use(cors());

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({ storage: storage });

app.post('/upload', upload.single('upload'), (req, res) => {
  const file = req.file;
  if (!file) {
    console.log('No file uploaded.');
    return res.status(400).send('No file uploaded.');
  }
  console.log('File uploaded successfully:', file);
  const url = `http://localhost:3000/uploads/${file.filename}`; // Full URL
  res.json({
    uploaded: true,
    url: url
  });
});

app.use('/uploads', express.static(uploadDir));

app.listen(3000, () => console.log('Server started on port 3000'));
............................................................................................

after uploading image but cannot display in frontned


import React, { useState } from 'react';
import { CKEditor } from '@ckeditor/ckeditor5-react';
import ClassicEditor from '@ckeditor/ckeditor5-build-classic';

const CKEditorComponent = () => {
  const [editorData, setEditorData] = useState('<p>Type your content here...</p>');

  const handleEditorChange = (_event: any, editor: { getData: () => any; }) => {
    const data = editor.getData();
    setEditorData(data);
    console.log('Editor Data:', data);
  };

  return (
    <div className="editor-container">
      <h2>CKEditor 5 with React</h2>
      <CKEditor
        editor={ClassicEditor}
        data={editorData}
        onChange={handleEditorChange}
        config={{
          ckfinder: {
            uploadUrl: 'http://localhost:3000/upload'
          },
          toolbar: [
            'heading', '|',
            'bold', 'italic', 'link', 'bulletedList', 'numberedList', 'blockQuote', '|',
            'undo', 'redo', '|',
            'imageUpload'
          ],
          language: 'en'
        }}
      />
      <div className="editor-content">
        <h3>Content</h3>
        {/* Render the editor content */}
        <div dangerouslySetInnerHTML={{ __html: editorData }} />
      </div>
    </div>
  );
};

export default CKEditorComponent;




app.js
const express = require('express');
const cors = require('cors');
const multer = require('multer');
const path = require('path');
const fs = require('fs');

const app = express();
const uploadDir = path.join(__dirname, 'uploads');

// Ensure the uploads directory exists
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir);
}

// Middleware
app.use(cors());

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({ storage: storage });

app.post('/upload', upload.single('upload'), (req, res) => {
  const file = req.file;
  if (!file) {
    console.log('No file uploaded.');
    return res.status(400).send('No file uploaded.');
  }
  console.log('File uploaded successfully:', file);
  const url = `http://localhost:3000/uploads/${file.filename}`; // Full URL
  res.json({
    uploaded: true,
    url: url
  });
});

app.use('/uploads', express.static(uploadDir));

app.listen(3000, () => console.log('Server started on port 3000'));

