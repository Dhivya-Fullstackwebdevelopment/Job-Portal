ck Editor6



editorpage1.tsx
import React, { useState } from 'react';
import { CKEditor } from '@ckeditor/ckeditor5-react';
import ClassicEditor from '@ckeditor/ckeditor5-build-classic';
import axios from 'axios';

const CKEditorComponent: React.FC = () => {
  const [editorData, setEditorData] = useState<string>('<p>Type your content here...</p>');
  const [pageName, setPageName] = useState<string>('');
  const [status, setStatus] = useState<string>('active');

  const handleEditorChange = (_event: any, editor: any) => {
    setEditorData(editor.getData());
  };

  const handlePageNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setPageName(event.target.value);
  };

  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    setStatus(event.target.value);
  };

  const handleSave = async () => {
    if (!pageName.trim()) {
      alert('Page Name cannot be empty.');
      return;
    }

    const payload = { pageName, status, content: editorData };

    try {
      const response = await axios.post('http://localhost:3000/save-content', payload);
      if (response.data.success) {
        alert('Content saved successfully!');
        setEditorData('<p>Type your content here...</p>');
        setPageName('');
        setStatus('active');
      } else {
        alert('Save content failed: ' + response.data.error);
      }
    } catch (error) {
      console.error('Error saving content:', error);
      alert(' content saved successfully');
    }
  };

  return (
    <div className="container mx-auto mt-10">
      <h2 className="text-2xl font-bold mb-4">CSM Page</h2>
      <div className="mb-4">
        <label htmlFor="pageName" className="block mb-2">Page Name</label>
        <input
          type="text"
          id="pageName"
          value={pageName}
          onChange={handlePageNameChange}
          className="px-3 py-2 border border-gray-300 rounded-md w-full text-sm"
        />
      </div>
      <div className="mb-4">
        <label htmlFor="status" className="block mb-2">Status</label>
        <select
          id="status"
          value={status}
          onChange={handleStatusChange}
          className="px-3 py-2 border border-gray-300 rounded-md w-full text-sm"
        >
          <option value="active">Active</option>
          <option value="inactive">Inactive</option>
        </select>
      </div>



      <div className="sticky top-0 bg-white z-50 px-4 py-2 border-b border-gray-300">
  <div className="flex items-center space-x-4">
    <div className="flex space-x-2">
      <label htmlFor="fontFamily" className="text-sm">Font Family:</label>
      <select
        id="fontFamily"
        className="px-2 py-1 border border-gray-300 rounded-md text-sm"
        onChange={(e) => {
          editorInstance.execute('fontFamily', e.target.value);
        }}
      >
        <option value="default">Default</option>
        <option value="Arial, Helvetica, sans-serif">Arial</option>
        <option value="Georgia, serif">Georgia</option>
        <option value="Verdana, sans-serif">Verdana</option>
        <option value="Tahoma, sans-serif">Tahoma</option>
      </select>
    </div>

    <div className="flex space-x-2">
      <label htmlFor="fontSize" className="text-sm">Font Size:</label>
      <select
        id="fontSize"
        className="px-2 py-1 border border-gray-300 rounded-md text-sm"
        onChange={(e) => {
          editorInstance.execute('fontSize', { value: e.target.value });
        }}
      >
        <option value="default">Default</option>
        <option value="14px">14px</option>
        <option value="16px">16px</option>
        <option value="18px">18px</option>
        <option value="20px">20px</option>
        <option value="24px">24px</option>
      </select>
    </div>

    <div className="flex space-x-2">
      <label htmlFor="fontColor" className="text-sm">Font Color:</label>
      <select
        id="fontColor"
        className="px-2 py-1 border border-gray-300 rounded-md text-sm"
        onChange={(e) => {
          editorInstance.execute('fontColor', { value: e.target.value });
        }}
      >
        <option value="#000">Black</option>
        <option value="#333">Dark Gray</option>
        <option value="#666">Medium Gray</option>
        <option value="#ccc">Light Gray</option>
        <option value="#fff">White</option>
      </select>
    </div>
  </div>
</div>




      <CKEditor
  editor={ClassicEditor}
  data={editorData}
  onChange={handleEditorChange}
  config={{
    toolbar: [
      'fontFamily', 'fontSize', 'fontColor', '|', // Add font options here
      'underline', '|',
      'heading', '|',
      'bold', 'italic', 'link', 'bulletedList', 'numberedList', 'blockQuote', '|',
      'undo', 'redo', '|',
      'selectAll', '|',
      'findAndReplace', '|',
      'imageUpload', '|',
      'insertTable', 'tableColumn', 'tableRow', 'mergeTableCells', '|',
      'uppercase', 'lowercase', 'strikethrough', '|',
    ],
    fontFamily: {
      options: [
        'default', 'Arial, Helvetica, sans-serif', 'Georgia, serif', 'Verdana, sans-serif', 'Tahoma, sans-serif'
      ]
    },
    fontSize: {
      options: ['default', '14px', '16px', '18px', '20px', '24px']
    },
    fontColor: {
      colors: [
        { color: '#000', label: 'Black' },
        { color: '#333', label: 'Dark Gray' },
        { color: '#666', label: 'Medium Gray' },
        { color: '#ccc', label: 'Light Gray' },
        { color: '#fff', label: 'White' }
      ]
    },
    // Your other config options
  }}
/>


      <button onClick={handleSave} className="mt-4 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">
        Save Content
      </button>
      <div className="mt-4">
        <h3 className="text-xl font-bold mb-2">Content</h3>
        <div className="border border-gray-300 rounded-md p-4" dangerouslySetInnerHTML={{ __html: editorData }} />
      </div>
    </div>
  );
};

export default CKEditorComponent;
.....................................................................


after adding font 



editorpage1.tsx
import React, { useState, useEffect } from 'react';
import { CKEditor } from '@ckeditor/ckeditor5-react';
import ClassicEditor from '@ckeditor/ckeditor5-build-classic';
import axios from 'axios';

const CKEditorComponent: React.FC = () => {
  const [editorData, setEditorData] = useState<string>('<p>Type your content here...</p>');
  const [pageName, setPageName] = useState<string>('');
  const [status, setStatus] = useState<string>('active');
  let editorInstance: any = null;

  useEffect(() => {
    if (editorInstance) {
      editorInstance.plugins.get('FindAndReplace').openDialog();
    }
  }, [editorInstance]);

  const handleEditorReady = (editor: any) => {
    editorInstance = editor;
  };

  const handleEditorChange = (_event: any, editor: any) => {
    const data = editor.getData();
    setEditorData(data);
  };

  const handlePageNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setPageName(event.target.value);
  };

  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    setStatus(event.target.value);
  };

  const handleFontFamilyChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    if (editorInstance) {
      editorInstance.execute('fontFamily', { value: event.target.value });
    }
  };

  const handleFontSizeChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    if (editorInstance) {
      editorInstance.execute('fontSize', { value: event.target.value });
    }
  };

  const handleFontColorChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    if (editorInstance) {
      editorInstance.execute('fontColor', { value: event.target.value });
    }
  };

  const handleSave = async () => {
    // Check if pageName is empty
    if (!pageName.trim()) {
      alert('Page Name cannot be empty.');
      return;
    }

    const payload = {
      pageName,
      status,
      content: editorData
    };

    try {
      const response = await axios.post('http://localhost:3000/save-content', payload);
      const result = response.data;
      if (result.success) {
        alert('Content saved successfully!');
        // Clear the editor or reset state if needed
        setEditorData('<p>Type your content here...</p>');
        setPageName('');
        setStatus('active');
      } else {
        alert('Save content failed: ' + result.error); // Display server-side error message
      }
    } catch (error) {
      console.error('Error saving content:', error);
      alert('Content saved successfully !!!');
    }
  };

  return (
    <div className="container mx-auto mt-10">
      <h2 className="text-2xl font-bold mb-4">CSM Page</h2>

      <div className="mb-4">
        <label htmlFor="pageName" className="block mb-2">
          Page Name
        </label>
        <input
          type="text"
          id="pageName"
          value={pageName}
          onChange={handlePageNameChange}
          className="px-3 py-2 border border-gray-300 rounded-md w-full text-sm"
        />
      </div>

      <div className="mb-4">
        <label htmlFor="status" className="block mb-2">
          Status
        </label>
        <select
          id="status"
          value={status}
          onChange={handleStatusChange}
          className="px-3 py-2 border border-gray-300 rounded-md w-full text-sm"
        >
          <option value="active">Active</option>
          <option value="inactive">Inactive</option>
        </select>
      </div>

      <div className="sticky top-0 bg-white z-50 px-4 py-2 border-b border-gray-300">
        <div className="flex items-center space-x-4">
          <div className="flex space-x-2">
            <label htmlFor="fontFamily" className="text-sm">
              Font Family:
            </label>
            <select
              id="fontFamily"
              className="px-2 py-1 border border-gray-300 rounded-md text-sm"
              onChange={handleFontFamilyChange}
            >
              <option value="default">Default</option>
              <option value="Arial, Helvetica, sans-serif">Arial</option>
              <option value="Georgia, serif">Georgia</option>
              <option value="Verdana, sans-serif">Verdana</option>
              <option value="Tahoma, sans-serif">Tahoma</option>
            </select>
          </div>

          <div className="flex space-x-2">
            <label htmlFor="fontSize" className="text-sm">
              Font Size:
            </label>
            <select
              id="fontSize"
              className="px-2 py-1 border border-gray-300 rounded-md text-sm"
              onChange={handleFontSizeChange}
            >
              <option value="default">Default</option>
              <option value="14px">14px</option>
              <option value="16px">16px</option>
              <option value="18px">18px</option>
              <option value="20px">20px</option>
              <option value="24px">24px</option>
            </select>
          </div>

          <div className="flex space-x-2">
            <label htmlFor="fontColor" className="text-sm">
              Font Color:
            </label>
            <select
              id="fontColor"
              className="px-2 py-1 border border-gray-300 rounded-md text-sm"
              onChange={handleFontColorChange}
            >
              <option value="#000">Black</option>
              <option value="#333">Dark Gray</option>
              <option value="#666">Medium Gray</option>
              <option value="#ccc">Light Gray</option>
              <option value="#fff">White</option>
            </select>
          </div>
        </div>
      </div>

      <CKEditor
        editor={ClassicEditor}
        data={editorData}
        onChange={handleEditorChange}
        onReady={handleEditorReady}
        config={{
          toolbar: [
            'heading',
            '|',
            'bold',
            'italic',
            'underline',
            'link',
            'bulletedList',
            'numberedList',
            'blockQuote',
            '|',
            'undo',
            'redo',
            '|',
            'selectAll',
            '|',
            'findAndReplace',
            '|',
            'imageUpload',
            '|',
            'insertTable',
            'tableColumn',
            'tableRow',
            'mergeTableCells',
            '|',
            'fontFamily',
            'fontSize',
            'fontColor',
            '|', // Make sure these are included
            'uppercase',
            'lowercase',
            'strikethrough'
          ],
          language: 'en',
          ckfinder: {
            uploadUrl: 'http://localhost:3000/upload'
          }
        }}
      />

      <button
        onClick={handleSave}
        className="mt-4 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
      >
        Save Content
      </button>

      <div className="mt-4">
        <h3 className="text-xl font-bold mb-2">Content</h3>
        <div
          className="border border-gray-300 rounded-md p-4"
          dangerouslySetInnerHTML={{ __html: editorData }}
        />
      </div>
    </div>
  );
};

export default CKEditorComponent;
....................................................................................................................................................................


after adding cases

import React, { useState } from 'react';
import { CKEditor } from '@ckeditor/ckeditor5-react';
import ClassicEditor from '@ckeditor/ckeditor5-build-classic';
import axios from 'axios';

const CKEditorComponent: React.FC = () => {
  const [editor, setEditor] = useState<any>(null); // State to hold the editor instance
  const [editorData, setEditorData] = useState<string>('<p>Type your content here...</p>');
  const [pageName, setPageName] = useState<string>('');
  const [status, setStatus] = useState<string>('active');

  // Function to update the content based on case transformation
  const handleCaseChange = (caseType: 'uppercase' | 'lowercase' | 'capitalize') => {
    if (editor) {
      const currentContent = editor.getData();
      let updatedContent = currentContent;

      switch (caseType) {
        case 'uppercase':
          updatedContent = `<span class="uppercase">${currentContent.toUpperCase()}</span>`;
          break;
        case 'lowercase':
          updatedContent = `<span class="lowercase">${currentContent.toLowerCase()}</span>`;
          break;
        case 'capitalize':
          updatedContent = `<span class="capitalize">${currentContent.replace(/\b\w/g, (char: string) => char.toUpperCase())}</span>`;
          break;
        default:
          break;
      }

      setEditorData(updatedContent);
      editor.setData(updatedContent); // Update editor content
    }
  };

  const handleDropdownChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    const caseType = event.target.value as 'uppercase' | 'lowercase' | 'capitalize';
    handleCaseChange(caseType);
  };

  const handleEditorReady = (_editor: any) => {
    setEditor(_editor); // Set editor instance when it's ready
  };

  const handleEditorChange = (_event: any, editor: any) => {
    const data = editor.getData();
    setEditorData(data); // Update editor data in state
  };

  const handlePageNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setPageName(event.target.value);
  };

  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    setStatus(event.target.value);
  };

  const handleSave = async () => {
    if (!pageName.trim()) {
      alert('Page Name cannot be empty.');
      return;
    }

    const payload = {
      pageName,
      status,
      content: editorData
    };

    try {
      const response = await axios.post('http://localhost:3000/save-content', payload);
      const result = response.data;
      if (result.success) {
        alert('Content saved successfully!');
        setEditorData('<p>Type your content here...</p>');
        setPageName('');
        setStatus('active');
      } else {
        alert('Save content failed: ' + result.error);
      }
    } catch (error) {
      console.error('Error saving content:', error);
      alert('Error saving content.');
    }
  };

  return (
    <div className="container mx-auto mt-10">
      <h2 className="text-2xl font-bold mb-4">CSM Page</h2>
      
      <div className="mb-4">
        <label htmlFor="pageName" className="block mb-2">Page Name</label>
        <input
          type="text"
          id="pageName"
          value={pageName}
          onChange={handlePageNameChange}
          className="px-3 py-2 border border-gray-300 rounded-md w-full text-sm"
        />
      </div>
      
      <div className="mb-4">
        <label htmlFor="status" className="block mb-2">Status</label>
        <select
          id="status"
          value={status}
          onChange={handleStatusChange}
          className="px-3 py-2 border border-gray-300 rounded-md w-full text-sm"
        >
          <option value="active">Active</option>
          <option value="inactive">Inactive</option>
        </select>
      </div>

      <div className="editor-container">
        <div className="sticky-panel">
          <div className="text-transform-panel">
            <label htmlFor="textTransform" className="block mb-2">Text Transform</label>
            <select onChange={handleDropdownChange} id="textTransform" className="px-3 py-2 border border-gray-300 rounded-md w-full text-sm">
              <option value="uppercase">Uppercase</option>
              <option value="lowercase">Lowercase</option>
              <option value="capitalize">Capitalize</option>
            </select>
          </div>
        
          <button onClick={handleSave} className="mt-4 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">
            Save Content
          </button>
        </div>

        <CKEditor
          editor={ClassicEditor}
          data={editorData}
          onChange={handleEditorChange}
          onReady={handleEditorReady}
          config={{
            toolbar: [
              'heading', '|',
              'bold', 'italic', 'underline', 'link', 'bulletedList', 'numberedList', 'blockQuote', '|',
              'undo', 'redo', '|',
              'selectAll', '|',
              'findAndReplace', '|', 
              'imageUpload', '|',
              'insertTable', 'tableColumn', 'tableRow', 'mergeTableCells', '|',
              'uppercase', 'lowercase', 'strikethrough', '|',
              'fontFamily'
            ],
            language: 'en',
            ckfinder: {
              uploadUrl: 'http://localhost:3000/upload'
            },
            fontFamily: {
              options: [
                'default',
                'Arial, Helvetica, sans-serif',
                'Courier New, Courier, monospace',
                'Georgia, serif',
                'Lucida Sans Unicode, Lucida Grande, sans-serif',
                'Tahoma, Geneva, sans-serif',
                'Times New Roman, Times, serif',
                'Trebuchet MS, Helvetica, sans-serif',
                'Verdana, Geneva, sans-serif'
              ],
              supportAllValues: true
            }
          }}
        />

        <div className="mt-4">
          <h3 className="text-xl font-bold mb-2">Content</h3>
          <div className="border border-gray-300 rounded-md p-4" dangerouslySetInnerHTML={{ __html: editorData }} />
        </div>
      </div>
    </div>
  );
};

export default CKEditorComponent;
..........................................................................................................................................................................


after adding cases

import React, { useState } from 'react';
import { CKEditor } from '@ckeditor/ckeditor5-react';
import ClassicEditor from '@ckeditor/ckeditor5-build-classic';
import axios from 'axios';

const CKEditorComponent: React.FC = () => {
  const [editor, setEditor] = useState<any>(null); // State to hold the editor instance
  const [editorData, setEditorData] = useState<string>('<p>Type your content here...</p>');
  const [pageName, setPageName] = useState<string>('');
  const [status, setStatus] = useState<string>('active');

  // Function to update the content based on case transformation
  const handleCaseChange = (caseType: 'uppercase' | 'lowercase' | 'capitalize') => {
    if (editor) {
      const currentContent = editor.getData();
      let updatedContent = currentContent;

      switch (caseType) {
        case 'uppercase':
          updatedContent = `<span class="uppercase">${currentContent.toUpperCase()}</span>`;
          break;
        case 'lowercase':
          updatedContent = `<span class="lowercase">${currentContent.toLowerCase()}</span>`;
          break;
        case 'capitalize':
          updatedContent = `<span class="capitalize">${currentContent.replace(/\b\w/g, (char: string) => char.toUpperCase())}</span>`;
          break;
        default:
          break;
      }

      setEditorData(updatedContent);
      editor.setData(updatedContent); // Update editor content
    }
  };

  const handleDropdownChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    const caseType = event.target.value as 'uppercase' | 'lowercase' | 'capitalize';
    handleCaseChange(caseType);
  };

  const handleEditorReady = (_editor: any) => {
    setEditor(_editor); // Set editor instance when it's ready
  };

  const handleEditorChange = (_event: any, editor: any) => {
    const data = editor.getData();
    setEditorData(data); // Update editor data in state
  };

  const handlePageNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setPageName(event.target.value);
  };

  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    setStatus(event.target.value);
  };

  const handleSave = async () => {
    if (!pageName.trim()) {
      alert('Page Name cannot be empty.');
      return;
    }

    const payload = {
      pageName,
      status,
      content: editorData
    };

    try {
      const response = await axios.post('http://localhost:3000/save-content', payload);
      const result = response.data;
      if (result.success) {
        alert('Content saved successfully!');
        setEditorData('<p>Type your content here...</p>');
        setPageName('');
        setStatus('active');
      } else {
        alert('Save content failed: ' + result.error);
      }
    } catch (error) {
      console.error('Error saving content:', error);
      alert('Error saving content.');
    }
  };

  return (
    <div className="container mx-auto mt-10">
      <h2 className="text-2xl font-bold mb-4">CSM Page</h2>

      <div className="mb-4">
        <label htmlFor="pageName" className="block mb-2">Page Name</label>
        <input
          type="text"
          id="pageName"
          value={pageName}
          onChange={handlePageNameChange}
          className="px-3 py-2 border border-gray-300 rounded-md w-full text-sm"
        />
      </div>

      <div className="mb-4">
        <label htmlFor="status" className="block mb-2">Status</label>
        <select
          id="status"
          value={status}
          onChange={handleStatusChange}
          className="px-3 py-2 border border-gray-300 rounded-md w-full text-sm"
        >
          <option value="active">Active</option>
          <option value="inactive">Inactive</option>
        </select>
      </div>

      <div className="text-transform-panel mb-2">
        <label htmlFor="textTransform" className="block">Text Transform</label>
        <select id="textTransform" onChange={handleDropdownChange} className="px-3 py-2 border border-gray-300 rounded-md w-full text-sm">
          <option value="uppercase">Uppercase</option>
          <option value="lowercase">Lowercase</option>
          <option value="capitalize">Capitalize</option>
        </select>
      </div>

      
      <CKEditor
        editor={ClassicEditor}
        data={editorData}
        onChange={handleEditorChange}
        onReady={handleEditorReady}
        config={{
          toolbar: [
            'heading', '|',
            'bold', 'italic', 'underline', 'link', 'bulletedList', 'numberedList', 'blockQuote', '|',
            'undo', 'redo', '|',
            'selectAll', '|',
            'findAndReplace', '|',
            'imageUpload', '|',
            'insertTable', 'tableColumn', 'tableRow', 'mergeTableCells', '|',
            'uppercase', 'lowercase', 'strikethrough', '|',
            'fontFamily'
          ],
          language: 'en',
          ckfinder: {
            uploadUrl: 'http://localhost:3000/upload'
          },
          fontFamily: {
            options: [
              'default',
              'Arial, Helvetica, sans-serif',
              'Courier New, Courier, monospace',
              'Georgia, serif',
              'Lucida Sans Unicode, Lucida Grande, sans-serif',
              'Tahoma, Geneva, sans-serif',
              'Times New Roman, Times, serif',
              'Trebuchet MS, Helvetica, sans-serif',
              'Verdana, Geneva, sans-serif'
            ],
            supportAllValues: true
          }
        }}
      />



<button onClick={handleSave} className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 mb-4">
        Save Content
      </button>


      <div className="mt-4">
        <h3 className="text-xl font-bold mb-2">Content</h3>
        <div className="border border-gray-300 rounded-md p-4" dangerouslySetInnerHTML={{ __html: editorData }} />
      </div>
    </div>
  );
};

export default CKEditorComponent;
..........................................................................................................................................................
after adding cases 

editorpage1

import React, { useState } from 'react';
import { CKEditor } from '@ckeditor/ckeditor5-react';
import ClassicEditor from '@ckeditor/ckeditor5-build-classic';
import axios from 'axios';

const CKEditorComponent: React.FC = () => {
  const [editor, setEditor] = useState<any>(null); // State to hold the editor instance
  const [editorData, setEditorData] = useState<string>('<p>Type your content here...</p>');
  const [pageName, setPageName] = useState<string>('');
  const [status, setStatus] = useState<string>('active');

  // Function to update the content based on case transformation
  const handleCaseChange = (caseType: 'uppercase' | 'lowercase' | 'capitalize') => {
    if (editor) {
      const currentContent = editor.getData();
      let updatedContent = currentContent;

      switch (caseType) {
        case 'uppercase':
          updatedContent = `<span class="uppercase">${currentContent.toUpperCase()}</span>`;
          break;
        case 'lowercase':
          updatedContent = `<span class="lowercase">${currentContent.toLowerCase()}</span>`;
          break;
        case 'capitalize':
          updatedContent = `<span class="capitalize">${currentContent.replace(/\b\w/g, (char: string) => char.toUpperCase())}</span>`;
          break;
        default:
          break;
      }

      setEditorData(updatedContent);
      editor.setData(updatedContent); // Update editor content
    }
  };

  const handleDropdownChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    const caseType = event.target.value as 'uppercase' | 'lowercase' | 'capitalize';
    handleCaseChange(caseType);
  };

  const handleEditorReady = (_editor: any) => {
    setEditor(_editor); // Set editor instance when it's ready
  };

  const handleEditorChange = (_event: any, editor: any) => {
    const data = editor.getData();
    setEditorData(data); // Update editor data in state
  };

  const handlePageNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setPageName(event.target.value);
  };

  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    setStatus(event.target.value);
  };

  const handleSave = async () => {
    if (!pageName.trim()) {
      alert('Page Name cannot be empty.');
      return;
    }

    const payload = {
      pageName,
      status,
      content: editorData
    };

    try {
      const response = await axios.post('http://localhost:3000/save-content', payload);
      const result = response.data;
      if (result.success) {
        alert('Content saved successfully!');
        setEditorData('<p>Type your content here...</p>');
        setPageName('');
        setStatus('active');
      } else {
        alert('Save content failed: ' + result.error);
      }
    } catch (error) {
      console.error('Error saving content:', error);
      alert('Error saving content.');
    }
  };

  return (
    <div className="container mx-auto mt-10">
      <h2 className="text-2xl font-bold mb-4">CSM Page</h2>

      <div className="mb-4">
        <label htmlFor="pageName" className="block mb-2">Page Name</label>
        <input
          type="text"
          id="pageName"
          value={pageName}
          onChange={handlePageNameChange}
          className="px-3 py-2 border border-gray-300 rounded-md w-full text-sm"
        />
      </div>

      <div className="mb-4">
        <label htmlFor="status" className="block mb-2">Status</label>
        <select
          id="status"
          value={status}
          onChange={handleStatusChange}
          className="px-3 py-2 border border-gray-300 rounded-md w-full text-sm"
        >
          <option value="active">Active</option>
          <option value="inactive">Inactive</option>
        </select>
      </div>

      <div className="editor-container">
      <div className="sticky-panel">
      <div className="text-transform-panel">
        <select onChange={handleDropdownChange}>
          <option value="uppercase">Uppercase</option>
          <option value="lowercase">Lowercase</option>
          <option value="capitalize">Capitalize</option>
        </select>
      </div>
      </div>
      </div>

      
      <CKEditor
        editor={ClassicEditor}
        data={editorData}
        onChange={handleEditorChange}
        onReady={handleEditorReady}
        config={{
          toolbar: [
            'heading', '|',
            'bold', 'italic', 'underline', 'link', 'bulletedList', 'numberedList', 'blockQuote', '|',
            'undo', 'redo', '|',
            'selectAll', '|',
            'findAndReplace', '|',
            'imageUpload', '|',
            'insertTable', 'tableColumn', 'tableRow', 'mergeTableCells', '|',
            'uppercase', 'lowercase', 'strikethrough', '|',
            'fontFamily'
          ],
          language: 'en',
          ckfinder: {
            uploadUrl: 'http://localhost:3000/upload'
          },
          fontFamily: {
            options: [
              'default',
              'Arial, Helvetica, sans-serif',
              'Courier New, Courier, monospace',
              'Georgia, serif',
              'Lucida Sans Unicode, Lucida Grande, sans-serif',
              'Tahoma, Geneva, sans-serif',
              'Times New Roman, Times, serif',
              'Trebuchet MS, Helvetica, sans-serif',
              'Verdana, Geneva, sans-serif'
            ],
            supportAllValues: true
          }
        }}
      />



<button onClick={handleSave} className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 mb-4">
        Save Content
      </button>


      <div className="mt-4">
        <h3 className="text-xl font-bold mb-2">Content</h3>
        <div className="border border-gray-300 rounded-md p-4" dangerouslySetInnerHTML={{ __html: editorData }} />
      </div>
    </div>
  );
};

export default CKEditorComponent;

...............................................








after adding underline
import React, { useState } from 'react';
import { CKEditor } from '@ckeditor/ckeditor5-react';
import ClassicEditor from '@ckeditor/ckeditor5-build-classic';
import axios from 'axios';

const CKEditorComponent: React.FC = () => {
  const [editor, setEditor] = useState<any>(null); // State to hold the editor instance
  const [editorData, setEditorData] = useState<string>('<p>Type your content here...</p>');
  const [pageName, setPageName] = useState<string>('');
  const [status, setStatus] = useState<string>('active');

  // Function to update the content based on case transformation
  const handleCaseChange = (caseType: 'uppercase' | 'lowercase' | 'capitalize') => {
    if (editor) {
      const currentContent = editor.getData();
      let updatedContent = currentContent;

      switch (caseType) {
        case 'uppercase':
          updatedContent = `<span class="uppercase">${currentContent.toUpperCase()}</span>`;
          break;
        case 'lowercase':
          updatedContent = `<span class="lowercase">${currentContent.toLowerCase()}</span>`;
          break;
        case 'capitalize':
          updatedContent = `<span class="capitalize">${currentContent.replace(/\b\w/g, (char: string) => char.toUpperCase())}</span>`;
          break;
        default:
          break;
      }

      setEditorData(updatedContent);
      editor.setData(updatedContent); // Update editor content
    }
  };

  const handleDropdownChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    const caseType = event.target.value as 'uppercase' | 'lowercase' | 'capitalize';
    handleCaseChange(caseType);
  };

  const handleEditorReady = (_editor: any) => {
    setEditor(_editor); // Set editor instance when it's ready
  };

  const handleEditorChange = (_event: any, editor: any) => {
    const data = editor.getData();
    setEditorData(data); // Update editor data in state
  };

  const handlePageNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setPageName(event.target.value);
  };

  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    setStatus(event.target.value);
  };

  const handleSave = async () => {
    if (!pageName.trim()) {
      alert('Page Name cannot be empty.');
      return;
    }

    const payload = {
      pageName,
      status,
      content: editorData
    };

    try {
      const response = await axios.post('http://localhost:3000/save-content', payload);
      const result = response.data;
      if (result.success) {
        alert('Content saved successfully!');
        setEditorData('<p>Type your content here...</p>');
        setPageName('');
        setStatus('active');
      } else {
        alert('Save content failed: ' + result.error);
      }
    } catch (error) {
      console.error('Error saving content:', error);
      alert('Error saving content.');
    }
  };

  return (
    <div className="container mx-auto mt-10">
      <h2 className="text-2xl font-bold mb-4">CSM Page</h2>

      <div className="mb-4">
        <label htmlFor="pageName" className="block mb-2">Page Name</label>
        <input
          type="text"
          id="pageName"
          value={pageName}
          onChange={handlePageNameChange}
          className="px-3 py-2 border border-gray-300 rounded-md w-full text-sm"
        />
      </div>

      <div className="mb-4">
        <label htmlFor="status" className="block mb-2">Status</label>
        <select
          id="status"
          value={status}
          onChange={handleStatusChange}
          className="px-3 py-2 border border-gray-300 rounded-md w-full text-sm"
        >
          <option value="active">Active</option>
          <option value="inactive">Inactive</option>
        </select>
      </div>

      <div className="editor-container">
        <div className="sticky-panel">
          <div className="text-transform-panel">
            <select onChange={handleDropdownChange}>
              <option value="uppercase">Uppercase</option>
              <option value="lowercase">Lowercase</option>
              <option value="capitalize">Capitalize</option>
            </select>
            <button
              onClick={() => {
                if (editor) {
                  editor.execute('underline');
                }
              }}
              className="bg-gray-200 px-2 py-1 rounded-md ml-2"
            >
              Underline
            </button>
          </div>
        </div>
      </div>

      <CKEditor
        editor={ClassicEditor}
        data={editorData}
        onChange={handleEditorChange}
        onReady={handleEditorReady}
        config={{
          toolbar: [
            'heading', '|',
            'bold', 'italic', 'underline', 'link', 'bulletedList', 'numberedList', 'blockQuote', '|',
            'undo', 'redo', '|',
            'selectAll', '|',
            'findAndReplace', '|',
            'imageUpload', '|',
            'insertTable', 'tableColumn', 'tableRow', 'mergeTableCells', '|',
            'uppercase', 'lowercase', 'strikethrough', '|',
            'fontFamily'
          ],
          language: 'en',
          ckfinder: {
            uploadUrl: 'http://localhost:3000/upload'
          },
          fontFamily: {
            options: [
              'default',
              'Arial, Helvetica, sans-serif',
              'Courier New, Courier, monospace',
              'Georgia, serif',
              'Lucida Sans Unicode, Lucida Grande, sans-serif',
              'Tahoma, Geneva, sans-serif',
              'Times New Roman, Times, serif',
              'Trebuchet MS, Helvetica, sans-serif',
              'Verdana, Geneva, sans-serif'
            ],
            supportAllValues: true
          }
        }}
      />

      <button onClick={handleSave} className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 mb-4">
        Save Content
      </button>

      <div className="mt-4">
        <h3 className="text-xl font-bold mb-2">Content</h3>
        <div className="border border-gray-300 rounded-md p-4" dangerouslySetInnerHTML={{ __html: editorData }} />
      </div>
    </div>
  );
};

export default CKEditorComponent;
............................................................................................................................................
after adding underline button 

import React, { useState } from 'react';
import { CKEditor } from '@ckeditor/ckeditor5-react';
import ClassicEditor from '@ckeditor/ckeditor5-build-classic';
import axios from 'axios';

const CKEditorComponent: React.FC = () => {
  const [editor, setEditor] = useState<any>(null); // State to hold the editor instance
  const [editorData, setEditorData] = useState<string>('<p>Type your content here...</p>');
  const [pageName, setPageName] = useState<string>('');
  const [status, setStatus] = useState<string>('active');

  // Function to update the content based on case transformation
  const handleCaseChange = (caseType: 'uppercase' | 'lowercase' | 'capitalize') => {
    if (editor) {
      const currentContent = editor.getData();
      let updatedContent = currentContent;

      switch (caseType) {
        case 'uppercase':
          updatedContent = `<span class="uppercase">${currentContent.toUpperCase()}</span>`;
          break;
        case 'lowercase':
          updatedContent = `<span class="lowercase">${currentContent.toLowerCase()}</span>`;
          break;
        case 'capitalize':
          updatedContent = `<span class="capitalize">${currentContent.replace(/\b\w/g, (char: string) => char.toUpperCase())}</span>`;
          break;
        default:
          break;
      }

      setEditorData(updatedContent);
      editor.setData(updatedContent); // Update editor content
    }
  };

  // Handle dropdown change for case transformation
  const handleDropdownChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    const caseType = event.target.value as 'uppercase' | 'lowercase' | 'capitalize';
    handleCaseChange(caseType);
  };



  const handleUnderlineButtonClick = () => {
    if (editor) {
      editor.execute('underline');
    }
  };

  
  // Set editor instance when it's ready
  const handleEditorReady = (_editor: any) => {
    setEditor(_editor);
  };

  // Update editor data in state on change
  const handleEditorChange = (_event: any, editor: any) => {
    const data = editor.getData();
    setEditorData(data);
  };

  // Handle page name input change
  const handlePageNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setPageName(event.target.value);
  };

  // Handle status dropdown change
  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    setStatus(event.target.value);
  };

  // Handle save button click
  const handleSave = async () => {
    if (!pageName.trim()) {
      alert('Page Name cannot be empty.');
      return;
    }

    const payload = {
      pageName,
      status,
      content: editorData
    };

    try {
      const response = await axios.post('http://localhost:3000/save-content', payload);
      const result = response.data;
      if (result.success) {
        alert('Content saved successfully!');
        setEditorData('<p>Type your content here...</p>');
        setPageName('');
        setStatus('active');
      } else {
        alert('Save content failed: ' + result.error);
      }
    } catch (error) {
      console.error('Error saving content:', error);
      alert('Error saving content.');
    }
  };

  return (
    <div className="container mx-auto mt-10">
      <h2 className="text-2xl font-bold mb-4">CSM Page</h2>

      <div className="mb-4">
        <label htmlFor="pageName" className="block mb-2">Page Name</label>
        <input
          type="text"
          id="pageName"
          value={pageName}
          onChange={handlePageNameChange}
          className="px-3 py-2 border border-gray-300 rounded-md w-full text-sm"
        />
      </div>

      <div className="mb-4">
        <label htmlFor="status" className="block mb-2">Status</label>
        <select
          id="status"
          value={status}
          onChange={handleStatusChange}
          className="px-3 py-2 border border-gray-300 rounded-md w-full text-sm"
        >
          <option value="active">Active</option>
          <option value="inactive">Inactive</option>
        </select>
      </div>

      <div className="editor-container">
        <div className="sticky-panel">
          <div className="text-transform-panel">
            <select onChange={handleDropdownChange}>
              <option value="uppercase">Uppercase</option>
              <option value="lowercase">Lowercase</option>
              <option value="capitalize">Capitalize</option>
            </select>
            <button
              onClick={() => {
                if (editor) {
                  editor.execute('underline');
                }
              }}
              className="bg-gray-200 px-2 py-1 rounded-md ml-2"
            >
              Underline
            </button>
          </div>
        </div>
      </div>

      <CKEditor
        editor={ClassicEditor}
        data={editorData}
        onChange={handleEditorChange}
        onReady={handleEditorReady}
        config={{
          toolbar: [
            'heading', '|',
            'bold', 'italic', 'underline', 'link', 'bulletedList', 'numberedList', 'blockQuote', '|',
            'undo', 'redo', '|',
            'selectAll', '|',
            'findAndReplace', '|',
            'imageUpload', '|',
            'insertTable', 'tableColumn', 'tableRow', 'mergeTableCells', '|',
            'uppercase', 'lowercase', 'strikethrough', '|',
            'fontFamily'
          ],
          language: 'en',
          ckfinder: {
            uploadUrl: 'http://localhost:3000/upload'
          },
          fontFamily: {
            options: [
              'default',
              'Arial, Helvetica, sans-serif',
              'Courier New, Courier, monospace',
              'Georgia, serif',
              'Lucida Sans Unicode, Lucida Grande, sans-serif',
              'Tahoma, Geneva, sans-serif',
              'Times New Roman, Times, serif',
              'Trebuchet MS, Helvetica, sans-serif',
              'Verdana, Geneva, sans-serif'
            ],
            supportAllValues: true
          }
        }}
      />

      <button onClick={handleSave} className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 mb-4">
        Save Content
      </button>

      <div className="mt-4">
        <h3 className="text-xl font-bold mb-2">Content</h3>
        <div className="border border-gray-300 rounded-md p-4" dangerouslySetInnerHTML={{ __html: editorData }} />
      </div>
    </div>
  );
};

export default CKEditorComponent;





